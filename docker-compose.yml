services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_CONTAINER:-rabbitmq}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - appnet

  gateway:
    build:
      context: .
      dockerfile: gateway/Gateway.API/Dockerfile
    container_name: ${GATEWAY_CONTAINER:-gateway}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RabbitMq__Host=${RABBITMQ_HOST}
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - JWT_KEY=${JWT_KEY}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
    ports:
      - "${GATEWAY_PORT:-5000}:5000"
    restart: unless-stopped
    networks:
      - appnet

  aiinsights:
    build:
      context: .
      dockerfile: services/AiInsightsService/Dockerfile
    container_name: ${AIINSIGHTS_CONTAINER:-aiinsights}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RabbitMq__Host=${RABBITMQ_HOST}
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_AI_INSIGHTS_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    ports:
      - "${AIINSIGHTS_PORT:-5001}:8080"
    restart: unless-stopped
    networks:
      - appnet

  authservice:
    build:
      context: .
      dockerfile: services/AuthService/Dockerfile
    container_name: ${AUTHSERVICE_CONTAINER:-authservice}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_AUTH_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "${AUTHSERVICE_PORT:-5002}:8080"
    restart: unless-stopped
    networks:
      - appnet

  matchservice:
    image: rizz-matchservice
    container_name: ${MATCHSERVICE_CONTAINER:-matchservice}
    build:
      context: .
      dockerfile: services/MatchService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_MATCH_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMQ__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__User=${RABBITMQ_USER}
      - RabbitMQ__Pass=${RABBITMQ_PASS}
    ports:
      - "${MATCHSERVICE_PORT:-5003}:8080"
    restart: unless-stopped
    networks:
      - appnet

  messagingservice:
    image: rizz-messagingservice
    container_name: ${MESSAGINGSERVICE_CONTAINER:-messagingservice}
    build:
      context: .
      dockerfile: services/MessagingService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_MESSAGING_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMq__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMq__User=${RABBITMQ_USER}
      - RabbitMq__Pass=${RABBITMQ_PASS}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "${MESSAGINGSERVICE_PORT:-5004}:8080"
    restart: unless-stopped
    networks:
      - appnet

  moderationservice:
    image: rizz-moderationservice
    container_name: ${MODERATIONSERVICE_CONTAINER:-moderationservice}
    build:
      context: .
      dockerfile: services/ModerationService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_MODERATION_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMq__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMq__User=${RABBITMQ_USER}
      - RabbitMq__Pass=${RABBITMQ_PASS}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "${MODERATIONSERVICE_PORT:-5005}:8080"
    restart: unless-stopped
    networks:
      - appnet

  purchaseservice:
    image: rizz-purchaseservice
    container_name: ${PURCHASESERVICE_CONTAINER:-purchaseservice}
    build:
      context: .
      dockerfile: services/PurchaseService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_PURCHASE_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASS}
    ports:
      - "${PURCHASESERVICE_PORT:-5006}:8080"
    restart: unless-stopped
    networks:
      - appnet

  pushservice:
    image: rizz-pushservice
    container_name: ${PUSHSERVICE_CONTAINER:-pushservice}
    build:
      context: .
      dockerfile: services/PushService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_PUSH_DB:-push_db};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Firebase__ProjectId=${FIREBASE_PROJECT_ID}
      - Firebase__ServiceAccountJson=${FIREBASE_SERVICE_ACCOUNT_JSON}
      - Firebase__ServiceAccountKeyPath=${FIREBASE_SERVICE_ACCOUNT_KEY_PATH}
      - RabbitMQ__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__User=${RABBITMQ_USER}
      - RabbitMQ__Pass=${RABBITMQ_PASS}
    ports:
      - "${PUSHSERVICE_PORT:-5007}:8080"
    restart: unless-stopped
    networks:
      - appnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notificationservice:
    image: rizz-notificationservice
    container_name: ${NOTIFICATIONSERVICE_CONTAINER:-notificationservice}
    build:
      context: .
      dockerfile: services/NotificationService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_NOTIFICATION_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMQ__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__User=${RABBITMQ_USER}
      - RabbitMQ__Pass=${RABBITMQ_PASS}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
    ports:
      - "${NOTIFICATIONSERVICE_PORT:-5009}:8080"
    restart: unless-stopped
    networks:
      - appnet

  userservice:
    image: rizz-userservice
    container_name: ${USERSERVICE_CONTAINER:-userservice}
    build:
      context: .
      dockerfile: services/UserService/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_USER_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - RabbitMQ__Host=${RABBITMQ_HOST:-rabbitmq}
      - RabbitMQ__User=${RABBITMQ_USER}
      - RabbitMQ__Pass=${RABBITMQ_PASS}
    ports:
      - "${USERSERVICE_PORT:-5008}:8080"
    restart: unless-stopped
    networks:
      - appnet

  postgres:
    image: postgis/postgis:15-3.4
    container_name: ${POSTGRES_CONTAINER:-postgres}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - appnet

volumes:
  postgres_data:

networks:
  appnet:
    driver: bridge
