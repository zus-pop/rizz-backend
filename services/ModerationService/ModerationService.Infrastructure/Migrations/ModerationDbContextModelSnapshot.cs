// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModerationService.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModerationService.Infrastructure.Migrations
{
    [DbContext(typeof(ModerationDbContext))]
    partial class ModerationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModerationService.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("BlockedUserId");

                    b.Property<int>("BlockerId")
                        .HasColumnType("integer")
                        .HasColumnName("BlockerId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId")
                        .HasDatabaseName("IX_Blocks_BlockedUserId");

                    b.HasIndex("BlockerId", "BlockedUserId", "IsActive")
                        .HasDatabaseName("IX_Blocks_BlockerId_BlockedUserId_IsActive");

                    b.ToTable("Blocks", (string)null);
                });

            modelBuilder.Entity("ModerationService.Domain.Entities.ModerationCase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("integer")
                        .HasColumnName("AssignedTo");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FinalAction")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FinalAction");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReportIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ReportIds");

                    b.Property<string>("Resolution")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetUserId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo")
                        .HasDatabaseName("IX_ModerationCases_AssignedTo");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_ModerationCases_Priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ModerationCases_Status");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("IX_ModerationCases_TargetUserId");

                    b.ToTable("ModerationCases", (string)null);
                });

            modelBuilder.Entity("ModerationService.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Action");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Reason");

                    b.Property<int>("ReportedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("ReportedUserId");

                    b.Property<int>("ReporterId")
                        .HasColumnType("integer")
                        .HasColumnName("ReporterId");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer")
                        .HasColumnName("ReviewedBy");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Reports_CreatedAt");

                    b.HasIndex("ReportedUserId")
                        .HasDatabaseName("IX_Reports_ReportedUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Reports_Status");

                    b.ToTable("Reports", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
