// <auto-generated />
using System;
using MatchService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatchService.Infrastructure.Migrations
{
    [DbContext(typeof(MatchDbContext))]
    partial class MatchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("match_service")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchService.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("matched_at");

                    b.Property<DateTime?>("UnmatchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unmatched_at");

                    b.Property<Guid?>("UnmatchedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("unmatched_by_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user1_id");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user2_id");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Matches_IsActive");

                    b.HasIndex("User1Id", "User2Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Matches_Users");

                    b.ToTable("matches", "match_service", t =>
                        {
                            t.HasCheckConstraint("CK_Match_DifferentUsers", "user1_id != user2_id");

                            t.HasCheckConstraint("CK_Match_UnmatchLogic", "(is_active = true AND unmatched_at IS NULL AND unmatched_by_user_id IS NULL) OR (is_active = false AND unmatched_at IS NOT NULL AND unmatched_by_user_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("MatchService.Domain.Entities.Swipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("SwipedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("swiped_at");

                    b.Property<Guid>("SwiperId")
                        .HasColumnType("uuid")
                        .HasColumnName("swiper_id");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_user_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Direction")
                        .HasDatabaseName("IX_Swipes_Direction");

                    b.HasIndex("SwiperId")
                        .HasDatabaseName("IX_Swipes_SwiperId");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("IX_Swipes_TargetUserId");

                    b.HasIndex("SwiperId", "TargetUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Swipes_Users");

                    b.ToTable("swipes", "match_service", t =>
                        {
                            t.HasCheckConstraint("CK_Swipe_DifferentUsers", "swiper_id != target_user_id");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
